INC_HARD_Y !zone {
    inc HARD_Y
    lda #26
    cmp HARD_Y
    bne .return

    lda #0
    sta HARD_Y

    lda HARD_X
    sec
    sbc #16
    sta HARD_X
    clc
    adc #40
    cmp #40 
    +buge .return    ; jmp if A < 40
    sta HARD_X
    inc HARD_Y

.return
    rts
}

DEC_HARD_Y !zone {
    dec HARD_Y
    bpl .return

    lda #25
    sta HARD_Y

    lda HARD_X
    clc
    adc #16
    sta HARD_X
    sec
    sbc #40
    bmi .return
    sta HARD_X
    dec HARD_Y

.return
    rts
}

!macro wrap_inc .mem, .inc, .and, .l {
    lda .mem
    clc
    adc #.inc
    and #.and-1
    sta .mem
    bne .l
}

!macro wrap_dec .mem, .dec, .and, .l {
    lda .mem
    sec
    sbc #.dec
    and #.and-1
    sta .mem
    +bbc .l
}

SCROLL_U !zone {
    inc HIRES
    lda VIC_SPR_0_Y
    cmp #73
    beq+
    !for .i, 0, 7 {
        ;dec VIC_SPR_0_Y + .i*2
    }
+
    +wrap_dec SOFT_Y, SCROLL_SPEED, 8, .return
    jsr DEC_HARD_Y

.return
    rts
}

SCROLL_D !zone {
    !for .i, 0, 7 {
        ;inc VIC_SPR_0_Y + .i*2
    }

    +wrap_inc SOFT_Y, SCROLL_SPEED, 8, .return
    jsr INC_HARD_Y
.return
    rts
}

SCROLL_L !zone {
    !for .i, 0, 7 {
        ;dec VIC_SPR_0_X + .i*2
    }

    +wrap_inc SOFT_X, SCROLL_SPEED, 8, .return

    inc HARD_X
    lda #40
    cmp HARD_X
    bne +

    lda #0
    sta HARD_X
    jsr DEC_HARD_Y
+
.return
    rts
}

SCROLL_R !zone {
    !for .i, 0, 7 {
        ;inc VIC_SPR_0_X + .i*2
    }

    +wrap_dec SOFT_X, SCROLL_SPEED, 8, .return

    dec HARD_X
    bpl +

    lda #39
    sta HARD_X
    jsr INC_HARD_Y
+
.return
    rts
}
