!to "color.prg", cbm   ; output program
!sl "labels.l"          ; create label file for vice
!cpu 6510               ; for illegal opcodes
!convtab scr            ; for conversion to c64 screen codes

!source "../lib/vic.acme"
!source "../lib/cia.acme"
!source "../lib/std.acme"

HIRES           = $4000; - $5fff
SCREEN          = $7000; - $73ff

+create_basic_starter $0c00
*=$0c00; = 2304

    ; Bit 7: Bit 8 of $D012        
    ; Bit 6: Extended Color Modus  
    ; Bit 5: Bitmapmode      
    ; Bit 4: Screen output enabled?
    ; Bit 3: 25 rows (24 otherwise)
CONTROL_Y=%00111011

    ; Bit 7..5: unused
    ; Bit 4: Multicolormode
    ; Bit 3: 40 cols (on)/38 cols (off)
    ; Bit 2..0: Offset in Pixels starting from the left screen edge
CONTROL_X=%00011000

FIRST_BADLINE = $30
LINE_0        = FIRST_BADLINE-3
LINE_SPLIT    = FIRST_BADLINE-3

LINES_TO_CRUNCH = 25

START !zone {
    ; select VIC area: $4000 - $7FFF
    lda CIA2_CONTROL_TIMER_A
    and #%11111100
    ora #%00000010
    sta CIA2_DATA_PORT_A

    ; select screen bank 
    lda # ((SCREEN % $4000 / $0400) << 4) | ((HIRES % $4000 / $2000) << 2)
    sta VIC_ADDR_SELECT

;-------------------------------------------------------------------------------
;   disable all basic, kernal and irq crap
;-------------------------------------------------------------------------------
    ; disable IRQs
    sei

    ; disable ROMs
    +set RAM_ROM_ALL_RAM_WITHCHARROM, RAM_ROM_SELECTION
    +set RAM_ROM_ALL_RAM_WITHIO, RAM_ROM_SELECTION

    ; ack all interrupts which might have happend
    +set $ff, VIC_IRQ_STATUS
    lda CIA1_INTERRUPT_CONTROL
    lda CIA2_INTERRUPT_CONTROL

    ; set empty interrupt routines
    +set16 EMPTY_INTERRUPT, VECTOR_NMI
    +set16 EMPTY_INTERRUPT, VECTOR_RESET
    +set16 EMPTY_INTERRUPT, VECTOR_IRQ

    ; disable_timer_interrupts
    lda #%01111111
    sta CIA1_INTERRUPT_CONTROL
    sta CIA2_INTERRUPT_CONTROL

    ; set timer A to 0
    sta CIA2_TIMER_A_LO
    sta CIA2_TIMER_A_HI

    ; trigger timer A interrupt
    +set %10000001, CIA2_INTERRUPT_CONTROL
    +set %00000001, CIA2_CONTROL_TIMER_A

    ; reset stack
    ldx #$ff
    txs

    ; just clear this flag and never ever touch this again
    cld

    ; enable IRQs
    cli

    ; wait till the timer interrupt has happend
-
    bit LOCK
    bne -

    +set CONTROL_X, VIC_CONTROL_X
    +set CONTROL_Y, VIC_CONTROL_Y

    ; -> NMI is disabled since we will never ever ack it again
    ; -> zero page completely free on this spot except for the special regs $00 and $01

    lda #0
    ldx #0
-
!for .j, 32 {
!set .i = .j - 1
    sta HIRES + .i*$100, x
}
!for .j, 4 {
!set .i = .j - 1
    sta SCREEN + .i*$100, x
    sta COLOR_RAM + .i*$100, x
}

    dex
    bne -


    ; 01 -> HN  10 -> LN
    ldy #%01100110
    ldy #%10011001

    ldx #15*8 
    clc
-
    tya
!for .c_row_, 16 {
!set .c_row = .c_row_ - 1
    !for .p_row_, 8 {
    !set .p_row = .p_row_ - 1
	sta HIRES + .p_row + .c_row * 320, x
	anc #$ff
	rol
	anc #$ff
	rol
    }
}
    txa
    sbx #8
    +lbpl -

    lda #%11110000
    ldx #$0f
-
!for .row_, 16 {
!set .row = .row_ - 1
    txa
    ora #(.row << 4)
    ;lda #.row
    sta SCREEN + 40 * .row, x
}
    dex
    bpl -



-
    inc HIRES
    jmp -
}

EMPTY_INTERRUPT
    rti

LOCK
    !by 0

TMP 
    !by 0
