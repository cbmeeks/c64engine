X_MSB_TABLE
    !by %00000000, %00000011, %00001100, %00001111
    !by %00110000, %00110011, %00111100, %00111111
    !by %11000000, %11000011, %11001100, %11001111
    !by %11110000, %11110011, %11111100, %11111111

!if DEBUG {
    !warn "bytes wasted: ", IRQ-*
}

!macro cmp_and_swp_const .l, .r {
    ldx SPR_I + .l
    ldy SPR_I + .r
    lda SPR_Y, y    ; A: r-elem
    cmp SPR_Y, x    ; M: l-elem
    ; swap if A < M
    +bult .swap
    +wait 4
    jmp ++
.swap
    sty SPR_I + .l
    stx SPR_I + .r
++
}
; total 23


!macro spr_sort {
    ; this is a sorting network generated with: 
    ; http://pages.ripco.net/~jgamble/nw.html

    !macro cmp_and_swp .l, .r {
        ldx SPR_I + .l
        ldy SPR_I + .r
        lda SPR_Y, y    ; A: r-elem
        cmp SPR_Y, x    ; M: l-elem
        ; swap if A < M
        ; skip if A >= M
        +buge +
        sty SPR_I + .l
        stx SPR_I + .r
+
    }

    +cmp_and_swp  0,  1
    +cmp_and_swp  2,  3
    +cmp_and_swp  4,  5
    +cmp_and_swp  6,  7
    +cmp_and_swp  8,  9
    +cmp_and_swp 10, 11
    +cmp_and_swp 12, 13
    +cmp_and_swp 14, 15
    +cmp_and_swp  0,  2
    +cmp_and_swp  4,  6
    +cmp_and_swp  8, 10
    +cmp_and_swp 12, 14
    +cmp_and_swp  1,  3
    +cmp_and_swp  5,  7
    +cmp_and_swp  9, 11
    +cmp_and_swp 13, 15
    +cmp_and_swp  0,  4
    +cmp_and_swp  8, 12
    +cmp_and_swp  1,  5
    +cmp_and_swp  9, 13
    +cmp_and_swp  2,  6
    +cmp_and_swp 10, 14
    +cmp_and_swp  3,  7
    +cmp_and_swp 11, 15
    +cmp_and_swp  0,  8
    +cmp_and_swp  1,  9
    +cmp_and_swp  2, 10
    +cmp_and_swp  3, 11
    +cmp_and_swp  4, 12
    +cmp_and_swp  5, 13
    +cmp_and_swp  6, 14
    +cmp_and_swp  7, 15
    +cmp_and_swp  5, 10
    +cmp_and_swp  6,  9
    +cmp_and_swp  3, 12
    +cmp_and_swp 13, 14
    +cmp_and_swp  7, 11
    +cmp_and_swp  1,  2
    +cmp_and_swp  4,  8
    +cmp_and_swp  1,  4
    +cmp_and_swp  7, 13
    +cmp_and_swp  2,  8
    +cmp_and_swp 11, 14
    +cmp_and_swp  5,  6
    +cmp_and_swp  9, 10
    +cmp_and_swp  2,  4
    +cmp_and_swp 11, 13
    +cmp_and_swp  3,  8
    +cmp_and_swp  7, 12
    +cmp_and_swp  6,  8
    +cmp_and_swp 10, 12
    +cmp_and_swp  3,  5
    +cmp_and_swp  7,  9
    +cmp_and_swp  3,  4
    +cmp_and_swp  5,  6
    +cmp_and_swp  7,  8
    +cmp_and_swp  9, 10
    +cmp_and_swp 11, 12
    +cmp_and_swp  6,  7
    +cmp_and_swp  8,  9
}

!macro spr_x {
    !for .i, 0, 3 {
        ldx #0

        !for .j, 0, 3 {
            ldy SPR_I + .i*4 + .j
            lda SPR_X, y
            asl
            txa
            rol
            tax
        }

        lda X_MSB_TABLE, x
        sta SPR_X_MSB + .i*4
    }
}

!align 255, 0
IRQ !zone {
;-------------------------------------------------------------------------------
;   LINE_0
;-------------------------------------------------------------------------------

    ; irq event                             ;  7
    ; last instruction                      ;  1 (min)
    +save_regs .out_0                       ; 12
                                            ;--> 20

    ; ack interrupt
    inc VIC_IRQ_STATUS                      ;  6

    inc VIC_RASTER                          ;  6
    +set16 .irq_line_0_plus_1, VECTOR_IRQ   ; 12
                                            ;--> 24

    ; save stack state
    tsx                                     ;  2
    +wait 3                                 ;  3
    ; begin raster stabilization
    cli                                     ;  2
                                            ;--> 7

    ; somewhere here the next interrupt will hit
    +wait 63 - 20 - 24 - 7

;-------------------------------------------------------------------------------
;   LINE_0 + 1
;-------------------------------------------------------------------------------
.irq_line_0_plus_1
    ; irq event                             ;  7
    ; last instruction                      ;1-2 (because of the nop field above)
    ; restore stack state
    txs                                     ;  2
                                            ;--> 10-11

    ; calculate the number of nops to skip in VSP
    lda #39                                 ;  2
    sec                                     ;  2
HARD_X = *+1
    sbc #0                                  ;  2
    lsr                                     ;  2
    sta .self_modifying_branch__nops + 1    ;  4
                                            ;--> 12

    ; introduce an extra cycle in VSP if carry is set
    bcs .set_bcc                            ;2-3
.set_bcs
    ldx #BCS_OPCODE                         ;  2
    bne +   ; always true                   ;  3
.set_bcc
    ldx #BCC_OPCODE                         ;  2
    nop     ; make this path as long        ;  2
+
    stx .self_modifying_branch__lsb         ;  4
                                            ;--> 11

    ; set up soft scroll
    lda #CONTROL_X                          ;  2
    clc                                     ;  2
SOFT_X = *+1
    adc #0                                  ;  2
    sta VIC_CONTROL_X                       ;  4
                                            ;--> 10

    ; switch to VIC bank 0
    ;inc CIA2_DATA_PORT_A                    ;  6
    inc $ff00

    +wait 63-11-12-11-10-6-6

    ; wobble check
    lda #LINE_0 + 2                         ;  2
    cmp VIC_RASTER                          ;  4
                                            ;--> 6
    +bne                                    ;3-2
    ; -> the raster interrupt is stable now with 3 cycles off

;-------------------------------------------------------------------------------
;   LINE_0 + 2
;-------------------------------------------------------------------------------

    ; wobble check from above               ;-->  3

    ; make FIRST_BADLINE a bad line
    lda #CONTROL_Y_INVALID                  ;  2
    sta VIC_CONTROL_Y                       ;  4
                                            ;-->  6

    lda #25                                 ;  2
    sec                                     ;  2
HARD_Y = *+1
    sbc #0                                  ;  2
    tax                                     ;  2
                                            ;-->  8

    ; pre-compute VIC_CONTROL_Y value for soft-scrolling
    lda #7 + (25+1) % 8                     ;  2
    sec                                     ;  2
SOFT_Y = *+1
    sbc #0                                  ;  2

    and #%00000111                          ;  2
    ora #CONTROL_Y_INVALID                  ;  2
    ; spill pre-computed value
    pha                                     ;  3
                                            ;--> 13

    ;wait till just before LINE_O + 3 == FIRST_BADLINE
    +wait_loop 63 - 3 - 6 - 8 - 13 - 20 - 4

;-------------------------------------------------------------------------------
;   FLD & line crunch
;-------------------------------------------------------------------------------

!macro inc_vic_control_y {
        lda VIC_CONTROL_Y                   ;  4
        clc                                 ;  2
        adc #1                              ;  2
        and #%00000111                      ;  2
        adc #CONTROL_Y_INVALID              ;  2
        sta VIC_CONTROL_Y                   ;  4
}                                           ;--> 16


.fld_loop
    cpx #0                                  ;  2
    beq +                                   ;  2 (in this loop)
    +inc_vic_control_y                      ; 16
                                            ;--> 20
    +wait_loop 63 - 20 - 2 - 3
    dex                                     ;  2
    jmp .fld_loop                           ;  3
+

    ldx HARD_Y

.crunch_loop
    cpx #0                                  ;  2
    beq +                                   ;  2 (in this loop)
    +inc_vic_control_y                      ; 16
                                            ;--> 20

    +wait 63 - 20 - 2 - 3
    dex                                     ;  2
    jmp .crunch_loop                        ;  3
+

    ; ^^^ these are always 25 raster lines ^^^

;-------------------------------------------------------------------------------
;   VSP
;-------------------------------------------------------------------------------
    ; make VSP line not a bad line
    inc VIC_CONTROL_Y
    +wait 5
    sec
    ; introduce an extra cycle if 39 - HARD_X is odd
.self_modifying_branch__lsb
    +bcs                                    ;2-3

.self_modifying_branch__nops
    ; always true and jump into nop field
    +bcs                                    ;  3
    +wait 38                                ;0-38

!if (>IRQ) != (>*) {
    !error "critical irq code in different pages"
}
    ; generate bad line
    dec VIC_CONTROL_Y

;-------------------------------------------------------------------------------
; soft scroll
;-------------------------------------------------------------------------------

    ; reload pre-computed VIC_CONTROL_Y value
    pla
    sta VIC_CONTROL_Y
    and #CONTROL_Y_MASK
    pha

    ;inc VIC_BORDER
    ldx #$00
    jsr DISPLAY_SPRITE_STRIP
    ;dec VIC_BORDER

    ;ldx CIA2_DATA_PORT_A
    ;dex

    pla
    ; wait till end of AGSP region
    ldy #FIRST_BADLINE+25+8
-
    cpy VIC_RASTER
    bne -

    ;stx CIA2_DATA_PORT_A
    ;stx $ff00
    sta VIC_CONTROL_Y

;-------------------------------------------------------------------------------
; sprite multiplexing
;-------------------------------------------------------------------------------

    ;dec VIC_BORDER
    ;ldx #$00
    ;jsr DISPLAY_SPRITE_STRIP
    ;dec VIC_BORDER
    +set16 .strip_1, VECTOR_IRQ
.out_0
    +ack_restore_rti

.strip_1
    +save_regs .out_1
    inc VIC_BORDER
    ldx #$04
    jsr DISPLAY_SPRITE_STRIP
    dec VIC_BORDER
    +set16 .strip_2, VECTOR_IRQ
.out_1
    +ack_restore_rti

.strip_2
    +save_regs .out_2
    inc VIC_BORDER
    ldx #$08
    jsr DISPLAY_SPRITE_STRIP
    dec VIC_BORDER
    +set16 .strip_3, VECTOR_IRQ
.out_2
    +ack_restore_rti

.strip_3
    +save_regs .out_3
    inc VIC_BORDER
    ldx #$0c
    jsr DISPLAY_SPRITE_STRIP
    dec VIC_BORDER
    +set_raster_line_8 LINE_0
    +set16 IRQ, VECTOR_IRQ
    jsr JOY

    !for .i, 0, 15 {
        lda _spr_y + .i
        sta SPR_Y + .i
        lda #.i
        sta SPR_I + .i
    }

    +wait 63*8*7

    inc VIC_BORDER
AAA
    +spr_sort
    !warn *-AAA
    dec VIC_BORDER
    inc VIC_BORDER
    +spr_x
    dec VIC_BORDER

.out_3
    +ack_restore_rti
EMPTY_INTERRUPT = *-1
}

!macro rol2 .addr {
    php
    rol .addr
    plp
    rol .addr
}


!zone {
DISPLAY_SPRITE_STRIP
    !for .i, 0, 3 {
        !set .r = 3-.i
        ; index
        ldy SPR_I + .i, x

        ; y-coord
        lda SPR_Y, y
        asl
        sta VIC_SPR_0_Y + 4*.r
        sta VIC_SPR_0_Y + 4*.r + 2

        ; x-coord
        lda SPR_X, y
        asl
        sta VIC_SPR_0_X + 4*.r
        sta VIC_SPR_0_X + 4*.r + 2

        ; colors
        lda SPR_A, y
        sta VIC_SPR_0_COLOR + .r*2
        lda SPR_B, y
        sta VIC_SPR_0_COLOR + .r*2 + 1

        ; set sprite pointers
        lda SPR_F, y
        sta SPR_PTR + .r*2 + 1
        clc
        adc #1
        sta SPR_PTR + .r*2
    }

    lda SPR_X_MSB, x
    sta VIC_SPR_X_MSB

    ; fist y of next strip
    ldy SPR_I + 4, x
.ld_index=*-1
    lda SPR_Y, y
    asl
    sec
    sbc #5
    +set_raster_line_8

    rts
}
