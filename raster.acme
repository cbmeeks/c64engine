!macro inc_vic_control_y {
    lda VIC_CONTROL_Y                       ;  4
    clc                                     ;  2
    adc #1                                  ;  2
    and #%00000111                          ;  2
    adc #CONTROL_Y_INVALID                  ;  2
    sta VIC_CONTROL_Y                       ;  4
}                                           ;--> 16

!align 255, 0
IRQ !zone {
;-------------------------------------------------------------------------------
;   LINE_0
;-------------------------------------------------------------------------------

    ; irq event                             ;  7
    ; last instruction                      ;  1 (min)
    sta .restore_a + 1                      ;  4
    stx .restore_x + 1                      ;  4
    sty .restore_y + 1                      ;  4

    ; ack interrupt
    inc VIC_IRQ_STATUS                      ;  6

    inc VIC_RASTER                          ;  6
    +set16 .irq_line_0_plus_1, VECTOR_IRQ   ; 12

    ; save stack state
    tsx                                     ;  2

    +wait 3                                 ;  6
    ; begin raster stabilization
    cli                                     ;  2
                                            ;--> 51

    ; somewhere here the next interrupt will hit
    +wait 63 - 51

;-------------------------------------------------------------------------------
;   LINE_0 + 1
;-------------------------------------------------------------------------------
.irq_line_0_plus_1
    ; irq event                             ;  7
    ; last instruction                      ;1-2 (because of the nop field above)
    ; restore stack state
    txs                                     ;  2
                                            ;--> 10-11

    ; calculate the number of nops to skip in VSP
    lda #39                                 ;  2
    sec                                     ;  2
.hard_x
    sbc #0                                  ;  2
HARD_X = .hard_x + 1
    lsr                                     ;  2
    sta .self_modifying_branch__nops + 1    ;  4
                                            ;--> 12

    ; introduce an extra cycle in VSP if carry is set
    bcs .set_bcc                            ;2-3
.set_bcs
    ldx #BCS_OPCODE                         ;  2
    bne +   ; always true                   ;  3
.set_bcc
    ldx #BCC_OPCODE                         ;  2
    nop     ; make this path as long        ;  2
+
    stx .self_modifying_branch__lsb         ;  4
                                            ;--> 11

    ; set up soft scroll
    lda #CONTROL_X                          ;  2
    clc                                     ;  2
.soft_x
    adc #0                                  ;  2
SOFT_X = .soft_x + 1
    sta VIC_CONTROL_X                       ;  4
                                            ;--> 10

    +wait 63-11-12-11-10-6

    ; wobble check
    lda #LINE_0 + 2                         ;  2
    cmp VIC_RASTER                          ;  4
                                            ;--> 6
    +bne                                    ;3-2
    ; -> the raster interrupt is stable now with 3 cycles off

;-------------------------------------------------------------------------------
;   LINE_0 + 2
;-------------------------------------------------------------------------------

    ; wobble check from above               ;  3
    lda #LINES_TO_CRUNCH                    ;  2
    sec                                     ;  2
.hard_y
    sbc #0                                  ;  2
HARD_Y = .hard_y + 1
    tax                                     ;  2
                                            ;--> 11

    ; make FIRST_BADLINE a bad line
    lda #CONTROL_Y_INVALID                  ;  2
    sta VIC_CONTROL_Y                       ;  4
                                            ;--> 6

    lda #7 + (LINES_TO_CRUNCH+1) % 8        ;  2
    sec                                     ;  2
.soft_y
    sbc #0                                  ;  2
SOFT_Y = .soft_y+1

    and #%00000111                          ;  2
    adc #CONTROL_Y_INVALID-1                ;  2
    sta .load_soft_y+1                      ;  4
                                            ;--> 14

    ;wait till just before LINE_O + 3 == FIRST_BADLINE
    +wait_loop 63 - 11 - 6 - 14 - 20 - 4

;-------------------------------------------------------------------------------
;   FLD & line crunch
;-------------------------------------------------------------------------------

.fld_loop
    cpx #0                                  ;  2
    beq +                                   ;  2 (in this loop)
    +inc_vic_control_y                      ; 16
                                            ;--> 20
    +wait_loop 63 - 20 - 2 - 3
    dex                                     ;  2
    jmp .fld_loop                           ;  3
+

    ldx HARD_Y

.crunch_loop
    cpx #0                                  ;  2
    beq +                                   ;  2 (in this loop)
    +inc_vic_control_y                      ; 16
                                            ;--> 20

    +wait_loop 63 - 20 - 2 - 3
    dex                                     ;  2
    jmp .crunch_loop                        ;  3
+

    ; ^^^ these are always 25 raster lines ^^^

;-------------------------------------------------------------------------------
;   VSP
;-------------------------------------------------------------------------------
    ; make VSP line not a bad line
    inc VIC_CONTROL_Y
    +wait 5
    ; crunch loop
    sec
    ; introduce an extra cycle if 39 - HARD_X is odd
.self_modifying_branch__lsb
    +bcs                                    ;2-3

.self_modifying_branch__nops
    ; always true and jump into nop field
    +bcs                                    ;  3
    +wait 38                                ;0-38

    ; generate bad line
    dec VIC_CONTROL_Y

;-------------------------------------------------------------------------------
; soft scroll
;-------------------------------------------------------------------------------

.load_soft_y
    lda #0
    sta VIC_CONTROL_Y
    pha

    +wait_loop 63 * 6 + 15

    ldx SOFT_Y
    bne +
    +wait_loop 24
+
    pla
    and #CONTROL_Y_MASK
    sta VIC_CONTROL_Y

!if (>IRQ) != (>*) {
    !error "critical irq code in different pages"
}

;-------------------------------------------------------------------------------
; clean up
;-------------------------------------------------------------------------------

    ;inc VIC_BORDER
    jsr JOY

    ;dec VIC_BORDER

    +set_raster_line_8 LINE_0
    +set16 IRQ, VECTOR_IRQ

    ; ack interrupt
    inc VIC_IRQ_STATUS

.restore_a
    lda #0
.restore_x
    ldx #0
.restore_y
    ldy #0

EMPTY_INTERRUPT
    rti
}
